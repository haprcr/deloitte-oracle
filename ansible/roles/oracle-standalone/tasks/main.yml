- name: Include base role
  include_role:
    name: base

- name: Include storage role
  include_role:
    name: storage
  vars:
    disks: "{{ sap_ora_disks }}"
    logvols: "{{ sap_ora_logvols }}"

# Oracle steps
- name: Check current runlevel
  command: who -r
  register: runlevel_output
  changed_when: false
  failed_when: "'runlevel 3' not in runlevel_output.stdout and 'runlevel 5' not in runlevel_output.stdout"
  when:
  - ansible_os_family == 'Suse'
  - wait_for_guest_register | bool

- name: Check /tmp free space
  shell: "df -kh /tmp | awk 'NR==2 {print $4}' | sed 's/G//'"
  register: tmp_free_space
  changed_when: false
  failed_when: tmp_free_space.stdout is version('1', '<') 


- name: Check /oracle free space
  shell: "df -kh /oracle | awk 'NR==2 {print $4}' | sed 's/G//'" 
  register: oracle_free_space
  changed_when: false
  failed_when: oracle_free_space.stdout is version('35', '<') 

# more /etc/passwd|grep -i ora
# oracle groups created
# more /etc/group|grep -i oracle 


- name: Verify Transparent Hugepages are disabled 
  shell: "cat /sys/kernel/mm/transparent_hugepage/enabled"
  register: thp_status
  changed_when: false

- name: Disable Transparent Hugepages if enabled
  shell: echo never | tee /sys/kernel/mm/transparent_hugepage/enabled
  args:
    warn: false # Suppress warning about using shell
  become: yes # Use sudo to write to the sysfs file
  when: "'[never]' not in thp_status.stdout" # Only run if THP is not already disabled

- name: Verify Transparent Hugepages are disabled
  shell: "cat /sys/kernel/mm/transparent_hugepage/enabled"
  register: thp_status
  changed_when: false
  failed_when: "'[never]' not in thp_status.stdout" # This task will now fail if THP is still not disabled


- name: Verify NUMA is off
  command: cat /sys/devices/system/node/online
  register: numa_status
  changed_when: false
  failed_when: numa_status.stdout | trim != '0'

#   [harshapriyacr@ankitol95 ~]$ cat /sys/devices/system/node/online
# 0

- name: Create Oracle base directory /oracle if it does not exist
  file:
    path: /oracle
    state: directory
    # owner: oracle
    # group: oinstall
    mode: 0775
  # become: yes

- name: Verify ownership and permissions of /oracle
  command: ls -ld /oracle
  register: oracle_dir_perms
  changed_when: false

- name: Create SID directory /oracle/{{ sap_oracle_sid }} for binary installation
  file:
    path: "/oracle/{{ sap_oracle_sid }}"
    state: directory
    # owner: oracle
    # group: oinstall
    mode: 0775
  # become: yes

- name: Verify ownership and permissions of /oracle/{{ sap_oracle_sid }}
  command: "ls -ld /oracle/{{ sap_oracle_sid }}"
  register: sid_dir_perms
  changed_when: false

- name: Create Oracle stage directory /oracle/stage
  file:
    path: /oracle/stage
    state: directory
    # owner: oracle
    # group: oinstall
    mode: 0775
  # become: yes

# - name: Download Oracle RDBMS software from GCS
#   command: "gsutil cp {{ oracle_software_source_bucket }}/{{ oracle_rdbms_zip_file }} /oracle/stage/{{ oracle_rdbms_zip_file }}"
#   args:
#     creates: "/oracle/stage/{{ oracle_rdbms_zip_file }}" # This prevents command from running if file already exists
#   become: yes # gsutil might require root or specific user with GCS access configured
#   # Consider adding a 'when' condition if gsutil is not guaranteed to be installed,
#   # or add a pre-check/installation task for gsutil.
#   tags: oracle_software_download


- name: Download Oracle RDBMS software from GCS
  command: "gsutil cp gs://{{ oracle_software_source_bucket }}/{{ oracle_rdbms_zip_file }} /oracle/stage/{{ oracle_rdbms_zip_file }}"
  args:
    creates: "/oracle/stage/{{ oracle_rdbms_zip_file }}" # This prevents command from running if file already exists
  # environment:
  #   gcloud_install_dir: /usr/local
  # become: yes # gsutil might require root or specific user with GCS access configured
  # Consider adding a 'when' condition if gsutil is not guaranteed to be installed,
  # or add a pre-check/installation task for gsutil.
  # tags: oracle_software_download
  # command: >-
  #   gsutil -m rsync -r
  #   gs://{{ oracle_software_source_bucket }}/{{ oracle_rdbms_zip_file }}/ /oracle/stage/{{ oracle_rdbms_zip_file }}/
  # with_items: "{{ sap_product_vars[sap_product_and_version].install_files }}"
  environment:
    CLOUDSDK_PYTHON: '{{ cloudsdk_python_export_path }}'
  # run_once: '{{ sap_nw_install_files_dest_is_nfs | bool }}'

# - name: Download install files
#   shell: |
#     gsutil -m rsync -x '^(?!{{ item }}).*' -r gs://{{ sap_hana_install_files_bucket_and_prefix }} {{ sap_hostagent_rpm_remote_path }}
#   args:
#     creates: "{{ sap_hostagent_rpm_remote_path }}/{{ item }}"
#   environment:
#     CLOUDSDK_PYTHON: "{{ cloudsdk_python_export_path }}"
#   with_items: "{{ sap_product_vars[sap_product_and_version].values() | list }}"



# - name: Change ownership of downloaded Oracle RDBMS software to oracle user
#   file:
#     path: "/oracle/stage/{{ oracle_rdbms_zip_file }}"
#     owner: oracle
#     group: oinstall
#   # become: yes

# - name: Unzip ORA19c RDBMS in location /oracle/stage/ORA19_RDBMS
#   unarchive:
#     src: "/oracle/stage/{{ oracle_rdbms_zip_file }}"
#     dest: "/oracle/stage/ORA19_RDBMS"
#     remote_src: yes # Indicates the source file is on the remote host
#     owner: oracle
#     group: oinstall
#     creates: "/oracle/stage/ORA19_RDBMS/runInstaller" # A common file to check if unzip was successful
#   become: yes # Unzipping might require root if files are created with specific permissions


# gsutil -m rsync -r gs://oracle-deloitte/51053828.zip/ /oracle/stage/51053828.zip/