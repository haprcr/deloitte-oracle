- name: Include base role
  include_role:
    name: base

- name: Include storage role
  include_role:
    name: storage
  vars:
    disks: "{{ sap_ora_disks }}"
    logvols: "{{ sap_ora_logvols }}"

# Oracle steps
- name: Check current runlevel
  command: who -r
  register: runlevel_output
  changed_when: false
  failed_when: "'runlevel 3' not in runlevel_output.stdout and 'runlevel 5' not in runlevel_output.stdout"
  when:
  - ansible_os_family == 'Suse'
  - wait_for_guest_register | bool

- name: Check /tmp free space
  shell: "df -kh /tmp | awk 'NR==2 {print $4}' | sed 's/G//'"
  register: tmp_free_space
  changed_when: false
  failed_when: tmp_free_space.stdout is version('1', '<') 


- name: Check /oracle free space
  shell: "df -kh /oracle | awk 'NR==2 {print $4}' | sed 's/G//'" 
  register: oracle_free_space
  changed_when: false
  failed_when: oracle_free_space.stdout is version('35', '<') 

# more /etc/passwd|grep -i ora
# oracle groups created
# more /etc/group|grep -i oracle 


- name: Verify Transparent Hugepages are disabled 
  shell: "cat /sys/kernel/mm/transparent_hugepage/enabled"
  register: thp_status
  changed_when: false
  failed_when: "'[never]' not in thp_status.stdout"


- name: Verify NUMA is off
  command: cat /sys/devices/system/node/online
  register: numa_status
  changed_when: false
  failed_when: numa_status.stdout | trim != '0'

#   [harshapriyacr@ankitol95 ~]$ cat /sys/devices/system/node/online
# 0

# - name: Ensure Oracle recommended kernel parameters are set
#   ansible.builtin.sysctl:
#     name: "{{ item.name }}"
#     value: "{{ item.value }}"
#     state: present
#     sysctl_file: /etc/sysctl.d/99-oracle.conf # Using a dedicated file for Oracle settings
#     reload: yes
#   loop:
#     - { name: 'kernel.shmmax', value: '{{ (ansible_memtotal_mb * 1024 * 1024 * 0.5) | int }}' } # Roughly 50% of RAM
#     - { name: 'kernel.shmall', value: '{{ (ansible_memtotal_mb * 1024 * 1024 * 0.9) | int / 4096 }}' } # Roughly 90% of RAM in pages
#     - { name: 'kernel.sem', value: '250 32000 100 128' }
#     - { name: 'fs.file-max', value: '6815744' }
#     - { name: 'net.ipv4.ip_local_port_range', value: '9000 65500' }
#     - { name: 'net.core.rmem_default', value: '262144' }
#     - { name: 'net.core.rmem_max', value: '4194304' }
#     - { name: 'net.core.wmem_default', value: '262144' }
#     - { name: 'net.core.wmem_max', value: '1048576' }
#   # The oracle-database-preinstall-19c RPM typically sets many of these.
#   # This task ensures they are explicitly present or updated.
#   tags: oracle_preinstall, kernel_params

# - name: Ensure Oracle user soft and hard limits are set
#   ansible.builtin.blockinfile:
#     path: /etc/security/limits.d/oracle-database-preinstall-19c.conf
#     block: |
#       oracle   soft   nofile    1024
#       oracle   hard   nofile    65536
#       oracle   soft   nproc     16384
#       oracle   hard   nproc     16384
#       oracle   soft   stack     10240
#       oracle   hard   stack     32768
#       oracle   soft   memlock   {{ (ansible_memtotal_mb * 1024 * 0.9) | int }} # Roughly 90% of RAM in KB
#       oracle   hard   memlock   {{ (ansible_memtotal_mb * 1024 * 0.9) | int }} # Roughly 90% of RAM in KB
#     create: yes
#     backup: yes
#     insertafter: EOF # Add at the end of the file if it exists, or create it
#   # The oracle-database-preinstall-19c RPM typically creates and manages this file.
#   # This task ensures the common Oracle limits are explicitly set or updated.
#   tags: oracle_preinstall, limits

# - name: Ensure Oracle user and primary group (oinstall) exist
#   ansible.builtin.user:
#     name: '{{ oracle_user }}'
#     group: oinstall
#     groups: dba, oper # Add common Oracle groups
#     comment: "Oracle Software Owner"
#     shell: /bin/bash # Or /bin/ksh if preferred
#     home: /home/oracle # Or /u01/app/oracle if standard
#     state: present
#   tags: oracle_preinstall, users_groups


# - name: ensure cluster user password is set
#   user:
#       name: '{{ sap_cluster_user }}'
#       password: '{{ sap_cluster_user_password | password_hash("sha512") }}'
#   when: sap_pw_fields | length == 1    # No password has been set
#   no_log: true
# - name: Ensure Oracle secondary groups exist (if not created by user module)
#   ansible.builtin.group:
#     name: "{{ item }}"
#     state: present
#   loop:
#     - dba
#     - oper
#     - backupdba # Common Oracle groups
#     - dgdba
#     - kmdba
#   tags: oracle_preinstall, users_groups